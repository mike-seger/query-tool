springdoc.swagger-ui.path: /swagger-ui.html

spring:
  datasource:
    url: jdbc:h2:mem:querytool;DB_CLOSE_DELAY=-1
    driver-class-name: org.h2.Driver
    username: sa
    password:
    platform: h2
  h2:
    console:
      enabled: true

liquibase:
  change-log: classpath:/db/changelog/db.changelog-master.yaml

management:
  endpoints:
    web:
      exposure:
        include: "*"

com.net128.query-tool:
  custom-queries: true
  minTTL: PT0.2s
  maxTTL: 60m
  subquery:
    rented: |
        select inventory_id, count(*) rented
        from rental
        group by inventory_id
    random-fields: |
            substring(cast(current_timestamp as char(32)), 1, 19) as timestamp,
            round(random() * 1000) as field1,
            round(random() * 1000) as field2,
            round(random() * 1000) as field3,
            round(random() * 1000) as field4,
            round(random() * 1000) as field5,
            substring(md5(concat('1', random())), 1, 8) as "field6", 
            substring(md5(concat('2', random())), 1, 16) as "field7",
            substring(md5(concat('3', random())), 1, 20) as "field8"

  queries:
    "[postgres:table counts]":
      sql: |
        select relname as table_name, n_live_tup as row_count
        from pg_stat_user_tables where schemaname=(select current_schema)
        order by row_count desc, table_name
    "[h2:table counts]":
      sql: |
        select table_name, row_count_estimate row_count
        from information_schema.tables
        where table_schema = 'PUBLIC'
        order by row_count desc, table_name
    "[postgres:table sizes]":
      sql: |
        select
          table_name as name,
          pg_relation_size(table_schema||'.'||table_name) as size,
          pg_size_pretty(pg_relation_size(table_schema||'.'||table_name)) as size_pretty
        from information_schema.tables
        where table_schema=(select current_schema)
        order by size desc
    "[postgres:activity]":
      sql: |  
        select *
        from pg_stat_activity
        where pg_stat_activity.query_start is not null
        order by backend_start
    "[postgres:locks]":
      sql: |
        select *
        from pg_locks
        join pg_stat_activity on pg_locks.pid = pg_stat_activity.pid
        order by backend_start desc
    "[current time]":
      minTTL: 10s
      maxTTL: 60m
      sql: |
        select current_timestamp
    "[top 100 rented]":
      sql: |
        select description, rented from
          (select film_id, rented from
            (select * from (
              ${com.net128.query-tool.subquery.rented}
            ) res
            order by rented desc
            limit 100) res2
          join inventory on res2.inventory_id = inventory.inventory_id) res3
        join film on res3.film_id = film.film_id

    "[random data (auto refresh)]":
      minTTL: 1s
      maxTTL: 10m
      sql: |
        with num_fields as (
          select
            row_number() over () as "id",
            ${com.net128.query-tool.subquery.random-fields}
          from generate_series(1, 10)
        )
        select * from num_fields
        
    "[mysql__random data (auto refresh)]":
      minTTL: 1s
      maxTTL: 10m
      sql: |
        with recursive num_fields as (
          select
            1 as id,
            ${com.net128.query-tool.subquery.random-fields}
          union all
          select
            id + 1,
            ${com.net128.query-tool.subquery.random-fields}
          from num_fields
          where id < 10
        )
        select * from num_fields